% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimationCKT.classif.tree.R
\name{CKT.fit.randomForest}
\alias{CKT.fit.randomForest}
\title{Fit a Random Forest that can be used for the estimation of conditional Kendall's tau.}
\usage{
CKT.fit.randomForest(
  datasetPairs,
  designMatrix = data.frame(x = datasetPairs[, 2:(ncol(datasetPairs) - 3)]),
  n,
  nTree = 10,
  mindev = 0.008,
  mincut = 0,
  nObs_per_Tree = ceiling(0.8 * n),
  nVar_per_Tree = ceiling(0.8 * (ncol(datasetPairs) - 4)),
  verbose = FALSE,
  nMaxDepthAllowed = 10
)
}
\arguments{
\item{datasetPairs}{the matrix of pairs and corresponding values of the kernel
as provided by \code{\link{datasetPairs}}.}

\item{designMatrix}{the matrix of predictor to be used for the fitting of the tree}

\item{n}{the original sample size of your dataset}

\item{nTree}{number of trees of the Random Forest.}

\item{mindev}{a factor giving the minimum deviation for a node to be splitted.
See \code{tree::\link[tree]{tree.control}()} for more details.}

\item{mincut}{the minimum number of observations (of pairs) in a node
See \code{tree::\link[tree]{tree.control}()} for more details.}

\item{nObs_per_Tree}{number of observations kept in each tree.}

\item{nVar_per_Tree}{number of variables kept in each tree.}

\item{verbose}{if \code{TRUE}, a message is printed after fitting each tree.}

\item{nMaxDepthAllowed}{the maximum number of errors of type
"the tree cannot be fitted" or "is too deep" before stopping the procedure.}
}
\value{
a list with two components
\itemize{
    \item \code{list_tree} a list of size \code{nTree}
    composed of all the fitted trees.

    \item \code{list_variables} a list of size \code{nTree}
    composed of the (predictor) variables for each tree.
}
}
\description{
Fit a Random Forest that can be used for the estimation of conditional Kendall's tau.
}
\examples{
# We simulate from a conditional copula
set.seed(1)
N = 800
Z = rnorm(n = N, mean = 5, sd = 2)
conditionalTau = -0.9 + 1.8 * pnorm(Z, mean = 5, sd = 2)
simCopula = VineCopula::BiCopSim(N=N , family = 1,
    par = VineCopula::BiCopTau2Par(1 , conditionalTau ))
X1 = qnorm(simCopula[,1])
X2 = qnorm(simCopula[,2])

datasetP = datasetPairs(X1 = X1, X2 = X2, Z = Z, h = 0.07, cut = 0.9)
est_RF = CKT.fit.randomForest(datasetPairs = datasetP, n = N,
  mindev = 0.008)

}
\references{
Derumigny, A., & Fermanian, J. D. (2019).
A classification point-of-view about conditional Kendallâ€™s tau.
Computational Statistics & Data Analysis, 135, 70-94.
(Algorithm 4)
}
